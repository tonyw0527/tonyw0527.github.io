{"componentChunkName":"component---src-templates-blog-post-js","path":"/event-delegation/","result":{"data":{"site":{"siteMetadata":{"title":"Tony's Blog"}},"markdownRemark":{"id":"105fc171-e8ac-521c-a4f8-d6227474c194","excerpt":"DOM 이벤트 각 DOM 요소들은 특정한 조건을 감지하였을 때, DOM 이벤트를 발생시킵니다. 그리고 이렇게 발생 된 DOM 이벤트를 제어하기 위해 이벤트 핸들러를 각 DOM 요소에 등록하여 사용합니다. 이벤트 흐름 표준 DOM 이벤트에서는…","html":"<h2>DOM 이벤트</h2>\n<p>각 DOM 요소들은 특정한 조건을 감지하였을 때, DOM 이벤트를 발생시킵니다. 그리고 이렇게 발생 된 DOM 이벤트를 제어하기 위해 이벤트 핸들러를 각 DOM 요소에 등록하여 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>이벤트 흐름</h2>\n<p>표준 DOM 이벤트에서는 3단계의 이벤트 흐름을 정의하였습니다.</p>\n<ol>\n<li>캡처링 단계 - 이벤트가 최상위 요소(window 객체)에서 하위 요소로 전파되어 나가며 최하위 요소(실제 타켓 요소)에까지 전달되는 단계 입니다.</li>\n<li>타겟 단계 - 이벤트가 실제 타겟 요소에 전달 되는 단계입니다.</li>\n<li>버블링 단계 - 이벤트가 캡처링 단계와 반대로 실제 타겟 요소로 부터 최상위 요소(window 객체)까지 전파 되는 단계입니다.</li>\n</ol>\n<p>이러한 이벤트 흐름을 아는 것이 이벤트 캡쳐링과 이벤트 버블링을 이해하는 열쇠입니다.</p>\n<blockquote>\n<p>캡쳐링과 버블링에서의 전파흐름은 event.stopPropagation() API를 통해 제어할 수 있습니다.\n특히 버블링의 경우 위 API를 통해 전파를 멈추는 것을 가급적 지양하길 권합니다.</p>\n</blockquote>\n<h2>이벤트 버블링</h2>\n<p>이벤트 버블링은 브라우저가 발생된 이벤트를 하위 요소에서 상위 요소로 전달시키는 이벤트 전파 방식을 말합니다.</p>\n<p>몇 몇 이벤트를 제외한 대부분의 이벤트는 버블링됩니다.</p>\n<h2>이벤트 캡쳐링</h2>\n<p>이벤트 캡쳐링은 이벤트 버블링과 반대로 상위 요소(body)에서 하위 요소로 이벤트가 전파되는 방식을 말합니다.</p>\n<p>보통 사용할 일이 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>capture<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>capture 옵션이 true이면 이벤트 핸들러는 캡쳐링 단계에서 동작합니다.\n반대로 false(default값)이면 버블링 단계에서 동작합니다.</p>\n</blockquote>\n<h2>event.target과 event.currentTarget(=this)</h2>\n<ul>\n<li>event.target : 실제 이벤트가 시작된 ‘타겟’ 요소를 참조하며 버블링이 진행되어도 변하지 않습니다.</li>\n<li>evnet.currentTarget(=this) : 현재 실행 중인 이벤트 핸들러가 할당된 요소를 참조합니다.</li>\n</ul>\n<h2>이벤트 위임</h2>\n<p>이벤트 캡쳐링과 버블링을 응용한 이벤트 핸들링 패턴입니다.</p>\n<p>공통 조상을 갖는 하위 요소들에게 일일이 이벤트 핸들러를 등록하는 것이 아니라 공통 조상 한 곳에만 이벤트 핸들러를 등록하여 각 하위 요소들로부터 버블링 되어 전파되는 이벤트들을 공통 조상 요소에서 일괄적으로 처리하게끔 하는 것 입니다.</p>\n<p>이를 통해 코드 중복을 방지하고 자원을 절약할 수 있습니다.</p>\n<p>공통 조상에 할당한 이벤트 핸들러에서 event.target을 참조하면 실제로 이벤트가 발생한 요소를 알 수 있습니다. 이를 통해 이벤트 핸들링을 하는 것이죠.</p>","frontmatter":{"title":"DOM이벤트에서 이벤트 위임까지","date":"May 10, 2021","description":"DOM 이벤트의 이벤트 흐름에 대해 살펴보고 이벤트 위임을 알아봅시다."}},"previous":{"fields":{"slug":"/babel/"},"frontmatter":{"title":"Babel 정리"}},"next":{"fields":{"slug":"/call-by-value/"},"frontmatter":{"title":"자바스크립트의 함수 호출 방식은 Call by value 입니다."}},"allMarkdownRemark":{"nodes":[{"excerpt":"Primitive Type 자바스크립트에는 boolean, number, string, null, undefined 5 가지의 원시 타입(primitive type)이 있습니다. 원시 타입은 변수에 값 자체를 할당합니다. 따라서 const…","fields":{"slug":"/call-by-value/"},"frontmatter":{"date":"May 12, 2021","title":"자바스크립트의 함수 호출 방식은 Call by value 입니다.","description":"Primitive type, Object Type, Call by value, Call by reference를 이해하고 나아가 Shallow clone과 deep clone에 대해서도 알아봅시다."}},{"excerpt":"DOM 이벤트 각 DOM 요소들은 특정한 조건을 감지하였을 때, DOM 이벤트를 발생시킵니다. 그리고 이렇게 발생 된 DOM 이벤트를 제어하기 위해 이벤트 핸들러를 각 DOM 요소에 등록하여 사용합니다. 이벤트 흐름 표준 DOM 이벤트에서는…","fields":{"slug":"/event-delegation/"},"frontmatter":{"date":"May 10, 2021","title":"DOM이벤트에서 이벤트 위임까지","description":"DOM 이벤트의 이벤트 흐름에 대해 살펴보고 이벤트 위임을 알아봅시다."}},{"excerpt":"Babel이란? Babel은 ECMAScript 2015+(ES6+) 이상 버전의 Javascript 코드를 인터넷 익스플로러 같은 이전 버전의 Javascript 엔진에서 실행 가능한 이전 버전의 Javascript…","fields":{"slug":"/babel/"},"frontmatter":{"date":"May 08, 2021","title":"Babel 정리","description":"Parsing, Transforming, Printing 바벨의 기본 구조에 대해 알아봅시다."}},{"excerpt":"…","fields":{"slug":"/webpack/"},"frontmatter":{"date":"May 06, 2021","title":"WEBPACK 정리","description":"웹팩에 대한 내용들을 정리했습니다."}},{"excerpt":"자바스크립트 비동기를 위해 알아야하는 키워드 동기(sync) & 비동기(async) 1번, 2번, 3번이라고 부르는 세 가지 일이 있다고 하자 동기 - 1번 작업이 끝나면 2번 작업을 시작, 2번 작업이 끝나면 3번 작업이 시작 비동기 - 1번,…","fields":{"slug":"/자바스크립트-비동기/"},"frontmatter":{"date":"May 05, 2021","title":"자바스크립트의 비동기","description":"자바스크립트 비동기에 대해 알아봅시다."}},{"excerpt":"기존에 Tistory…","fields":{"slug":"/블로그를-시작하며/"},"frontmatter":{"date":"May 04, 2021","title":"블로그를 시작하며","description":"새롭게 블로그를 시작합니다 :)"}},{"excerpt":"This is my first post on my new fake blog! How exciting! I’m sure I’ll write a lot more interesting things in the future. Oh, and here’s a…","fields":{"slug":"/hello-world/"},"frontmatter":{"date":"May 01, 2015","title":"Hello World","description":"Hello World"}}]}},"pageContext":{"id":"105fc171-e8ac-521c-a4f8-d6227474c194","previousPostId":"38695025-1aa9-59a4-84c1-527f33db89ff","nextPostId":"2f9440c9-e3d3-502e-92e6-1132475f8ba6"}},"staticQueryHashes":["2841359383","3257411868"]}